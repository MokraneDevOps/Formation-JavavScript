// ********** 1 CALLBACK SANS PARAMETRES **********

// Fonction qui console log des A
function printA() {
    console.log("A");
}

// Fonction qui console log des B
function printB() {
    console.log("B");
}

// Fonction qui prend un nombre et une fonction en paramètre, et exécute x fois la fonction
function executeXtime(x, callback) {
    for (let i = 0; i < x; i++) {
        callback();
    }
}

// Test de executeXtime appliquée à printA et printB
executeXtime(3, printA);  // A A A
executeXtime(5, printB);  // B B B B B

// ********** 2 CALLBACK AVEC PARAMETRES **********

// Fonction qui retourne true si le nombre est impair
function isOdd(num) {
    return num % 2 !== 0;
}

// Fonction qui retourne true si la chaîne contient le mot "greta"
function containGreta(str) {
    return str.includes("greta");
}

// Fonction qui vérifie s'il y a au moins deux éléments dans un tableau qui respectent une condition
function atleastTwoElements(arr, callback) {
    let count = 0;
    for (let element of arr) {
        if (callback(element)) count++;
        if (count >= 2) return true;
    }
    return false;
}

// Fonction qui filtre un tableau en utilisant une fonction en paramètre
function filterArray(arr, callback) {
    let result = [];
    for (let element of arr) {
        if (callback(element)) {
            result.push(element);
        }
    }
    return result;
}

// Tests des fonctions isOdd, containGreta, atleastTwoElements et filterArray
console.log(isOdd(3));  // true
console.log(isOdd(4));  // false
console.log(containGreta("Hello Greta!"));  // true
console.log(containGreta("Hello world!"));  // false
console.log(atleastTwoElements([1, 3, 4, 7], isOdd));  // true
console.log(atleastTwoElements([2, 4, 6], isOdd));  // false
console.log(filterArray([1, 2, 3, 4, 5], isOdd));  // [1, 3, 5]

// ********** 3 FONCTION ANONYME **********

// Utilisation de executeXtime avec une fonction anonyme
executeXtime(4, function() {
    console.log("Fonction anonyme exécutée");
});

// Utilisation de filterArray avec une fonction anonyme
let filteredArray = filterArray([10, 25, 30, 45], function(num) {
    return num > 20;
});
console.log(filteredArray);  // [25, 30, 45]

// Utilisation de atleastTwoElements avec une fonction anonyme
let hasTwoElementsAbove20 = atleastTwoElements([5, 15, 25, 35], function(num) {
    return num > 20;
});
console.log(hasTwoElementsAbove20);  // true

// ********** 4 MAP **********

// Fonction qui multiplie par 100
function multiplyBy100(num) {
    return num * 100;
}

// Fonction qui ajoute 10
function add10(num) {
    return num + 10;
}

// Utilisation de map pour appliquer multiplyBy100 et add10
let numbers = [1, 2, 3, 4];
let multiplied = numbers.map(multiplyBy100);
console.log(multiplied);  // [100, 200, 300, 400]

let added = numbers.map(add10);
console.log(added);  // [11, 12, 13, 14]

// ********** 5 FOR EACH **********

// Utilisation de forEach pour afficher chaque élément
numbers.forEach(function(num) {
    console.log(num);
});

// ********** 6 SORT **********

// Sort sans paramètres (tri par ordre alphabétique)
let words = ["banana", "apple", "cherry"];
words.sort();
console.log(words);  // ["apple", "banana", "cherry"]

// Sort tri de nombres
let numbersToSort = [30, 2, 10, 21];
numbersToSort.sort(function(a, b) {
    return a - b;
});
console.log(numbersToSort);  // [2, 10, 21, 30]

// Sort tri par longueur de mot
let wordsByLength = ["elephant", "cat", "dolphin", "bear"];
wordsByLength.sort(function(a, b) {
    return a.length - b.length;
});
console.log(wordsByLength);  // ["cat", "bear", "dolphin", "elephant"]
